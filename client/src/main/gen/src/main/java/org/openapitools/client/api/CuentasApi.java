/*
 * Account Microservice API
 * API de cuentas para Banking-MS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AmountRequest;
import org.openapitools.client.model.BankAccount;
import org.openapitools.client.model.CreateAccountRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CuentasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CuentasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CuentasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cuentasGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de cuentas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cuentas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cuentasGetCall(_callback);

    }

    /**
     * Listar cuentas
     * 
     * @return List&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de cuentas </td><td>  -  </td></tr>
     </table>
     */
    public List<BankAccount> cuentasGet() throws ApiException {
        ApiResponse<List<BankAccount>> localVarResp = cuentasGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Listar cuentas
     * 
     * @return ApiResponse&lt;List&lt;BankAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de cuentas </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BankAccount>> cuentasGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cuentasGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<BankAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listar cuentas (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de cuentas </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasGetAsync(final ApiCallback<List<BankAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<BankAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cuentasIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cuentas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cuentasIdDelete(Async)");
        }

        return cuentasIdDeleteCall(id, _callback);

    }

    /**
     * Eliminar cuenta
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public void cuentasIdDelete(Long id) throws ApiException {
        cuentasIdDeleteWithHttpInfo(id);
    }

    /**
     * Eliminar cuenta
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cuentasIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = cuentasIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Eliminar cuenta (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cuentasIdDepositarPut
     * @param id  (required)
     * @param amountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdDepositarPutCall(Long id, AmountRequest amountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = amountRequest;

        // create path and map variables
        String localVarPath = "/cuentas/{id}/depositar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasIdDepositarPutValidateBeforeCall(Long id, AmountRequest amountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cuentasIdDepositarPut(Async)");
        }

        // verify the required parameter 'amountRequest' is set
        if (amountRequest == null) {
            throw new ApiException("Missing the required parameter 'amountRequest' when calling cuentasIdDepositarPut(Async)");
        }

        return cuentasIdDepositarPutCall(id, amountRequest, _callback);

    }

    /**
     * Depositar a la cuenta
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio </td><td>  -  </td></tr>
     </table>
     */
    public BankAccount cuentasIdDepositarPut(Long id, AmountRequest amountRequest) throws ApiException {
        ApiResponse<BankAccount> localVarResp = cuentasIdDepositarPutWithHttpInfo(id, amountRequest);
        return localVarResp.getData();
    }

    /**
     * Depositar a la cuenta
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccount> cuentasIdDepositarPutWithHttpInfo(Long id, AmountRequest amountRequest) throws ApiException {
        okhttp3.Call localVarCall = cuentasIdDepositarPutValidateBeforeCall(id, amountRequest, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Depositar a la cuenta (asynchronously)
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdDepositarPutAsync(Long id, AmountRequest amountRequest, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasIdDepositarPutValidateBeforeCall(id, amountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cuentasIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cuentas/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cuentasIdGet(Async)");
        }

        return cuentasIdGetCall(id, _callback);

    }

    /**
     * Obtener cuenta por id
     * 
     * @param id  (required)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public BankAccount cuentasIdGet(Long id) throws ApiException {
        ApiResponse<BankAccount> localVarResp = cuentasIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Obtener cuenta por id
     * 
     * @param id  (required)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccount> cuentasIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = cuentasIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener cuenta por id (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cuenta </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No encontrado </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdGetAsync(Long id, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cuentasIdRetirarPut
     * @param id  (required)
     * @param amountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Regla de negocio (ahorros &gt;&#x3D; 0; corriente &gt;&#x3D; -500) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdRetirarPutCall(Long id, AmountRequest amountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = amountRequest;

        // create path and map variables
        String localVarPath = "/cuentas/{id}/retirar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasIdRetirarPutValidateBeforeCall(Long id, AmountRequest amountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cuentasIdRetirarPut(Async)");
        }

        // verify the required parameter 'amountRequest' is set
        if (amountRequest == null) {
            throw new ApiException("Missing the required parameter 'amountRequest' when calling cuentasIdRetirarPut(Async)");
        }

        return cuentasIdRetirarPutCall(id, amountRequest, _callback);

    }

    /**
     * Retirar de la cuenta
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Regla de negocio (ahorros &gt;&#x3D; 0; corriente &gt;&#x3D; -500) </td><td>  -  </td></tr>
     </table>
     */
    public BankAccount cuentasIdRetirarPut(Long id, AmountRequest amountRequest) throws ApiException {
        ApiResponse<BankAccount> localVarResp = cuentasIdRetirarPutWithHttpInfo(id, amountRequest);
        return localVarResp.getData();
    }

    /**
     * Retirar de la cuenta
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Regla de negocio (ahorros &gt;&#x3D; 0; corriente &gt;&#x3D; -500) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccount> cuentasIdRetirarPutWithHttpInfo(Long id, AmountRequest amountRequest) throws ApiException {
        okhttp3.Call localVarCall = cuentasIdRetirarPutValidateBeforeCall(id, amountRequest, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retirar de la cuenta (asynchronously)
     * 
     * @param id  (required)
     * @param amountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saldo actualizado </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Regla de negocio (ahorros &gt;&#x3D; 0; corriente &gt;&#x3D; -500) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasIdRetirarPutAsync(Long id, AmountRequest amountRequest, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasIdRetirarPutValidateBeforeCall(id, amountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cuentasPost
     * @param createAccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cuenta creada (saldo inicial 0.0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio o validación </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasPostCall(CreateAccountRequest createAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRequest;

        // create path and map variables
        String localVarPath = "/cuentas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cuentasPostValidateBeforeCall(CreateAccountRequest createAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAccountRequest' is set
        if (createAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRequest' when calling cuentasPost(Async)");
        }

        return cuentasPostCall(createAccountRequest, _callback);

    }

    /**
     * Crear cuenta
     * 
     * @param createAccountRequest  (required)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cuenta creada (saldo inicial 0.0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio o validación </td><td>  -  </td></tr>
     </table>
     */
    public BankAccount cuentasPost(CreateAccountRequest createAccountRequest) throws ApiException {
        ApiResponse<BankAccount> localVarResp = cuentasPostWithHttpInfo(createAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Crear cuenta
     * 
     * @param createAccountRequest  (required)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cuenta creada (saldo inicial 0.0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio o validación </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccount> cuentasPostWithHttpInfo(CreateAccountRequest createAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = cuentasPostValidateBeforeCall(createAccountRequest, null);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Crear cuenta (asynchronously)
     * 
     * @param createAccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cuenta creada (saldo inicial 0.0) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error de negocio o validación </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cuentasPostAsync(CreateAccountRequest createAccountRequest, final ApiCallback<BankAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = cuentasPostValidateBeforeCall(createAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
